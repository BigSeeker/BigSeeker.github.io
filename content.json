{"meta":{"title":"留白","subtitle":"爱你不止三千遍","description":"From zero to hero","author":"Lee","url":"https://github.com/BigSeeker/BigSeeker.github.io"},"pages":[],"posts":[{"title":"BFC详解","slug":"BFC详解","date":"2019-09-30T01:05:46.000Z","updated":"2019-09-30T03:06:07.722Z","comments":true,"path":"2019/09/30/BFC详解/","link":"","permalink":"https://github.com/BigSeeker/BigSeeker.github.io/2019/09/30/BFC详解/","excerpt":"","text":"前言之前遇到了外边距塌陷的问题，然后听到有人提到BFC，所以正好想通过BFC了解到外边距折叠机制。 一、什么是BFCBFC(Block Formatting Context)，是块级格式化上下文，是W3C CSS2.1规范中的一个概念。 它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。 而Block Formatting Contexts(BFC，块级格式化上下文)，就是一个块级元素的渲染显示规则。通俗一点讲，可以把BFC理解为一个封闭的大箱子，容器里面的子元素不会影响到外面的元素，反之也如此。 BFC的布局规则如下： ​ 1.内部的盒子会在垂直方向，一个个地放置； ​ 2.BFC是页面上的一个隔离的独立容器； ​ 3.属于同一个BFC的两个相邻Box的上下margin会发生重叠； ​ 4.计算BFC的高度时，浮动元素也参与计算； ​ 5.每个元素的左边，与包含的盒子的左边相接触，即使存在浮动也是如此； ​ 6.BFC的区域不会与float重叠； 触发BFC的条件： body根元素 浮动元素：float不为none的属性值 绝对定位元素：position(absolute、fixed) display为：inline-block、table-cells、flex overflow除了visible以外的值(hidden、auto、scroll) 二、BFC的特性及应用接下来介绍BFC常见的特性和应用，这一部分在解释原因时，会用到上文的布局规则和触发条件，所以需要注意一下。 1.两个普通流中的父子关系块元素垂直方向上的margin会折叠初始代码： 123456789101112131415161718192021&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;BFC&lt;/title&gt; &lt;style&gt; .box2&#123; width: 200px; height: 200px; background-color: #ccc; &#125; .box1&#123; width: 100px; height: 100px; background-color: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box2&quot;&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 效果图是： 给box1(红盒子)加一个margin-top:100px,代码为： 1234567891011121314151617181920212223&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;BFC&lt;/title&gt; &lt;style&gt; .box2&#123; width: 200px; height: 200px; background-color: #ccc; margin: 0 auto; &#125; .box1&#123; width: 100px; height: 100px; background-color: red; margin-top: 100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box2&quot;&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/body&gt; 效果图为： 两个盒子整体向下移动了100px，发生了margin塌陷。为什么会出现这种情况，根据MDN，产生的原因在于： 如果块级父元素中，不存在上边框、上内补、inline content、 清除浮动这四条属性(对于上边框和上内补，也可以说，当上边距及上内补宽度为0时),那么这个块级元素和其第一个子元素的上边距就会发生折叠。这个折叠之后的值在这里取的就是两者之间的最大值。 对于块级元素与最后一个子元素的下边界发生的折叠也是同理的。 解决外边距塌陷的问题： 123456789101112131415161718192021222324&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;BFC&lt;/title&gt; &lt;style&gt; .box2&#123; width: 200px; height: 200px; background-color: #ccc; margin: 0 auto; overflow: hidden; &#125; .box1&#123; width: 100px; height: 100px; background-color: red; margin-top: 100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box2&quot;&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 效果图是： 2.两个相邻的普通流中的块元素垂直方向上的margin会折叠12345678910111213141516171819202122232425&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;两个相邻盒子&lt;/title&gt; &lt;style&gt; div&#123; margin:0 auto; &#125; .box1&#123; width: 200px; height: 200px; background-color: red; margin-bottom: 50px; &#125; .box2&#123; width: 200px; height: 200px; background-color: blue; margin-top: 50px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;&lt;/body&gt; 效果图为： 根据BFC规则的第3条： 盒子垂直方向的距离由margin决定，属于同一个BFC的+两个相邻Box的+上下margin会发生重叠。 例2之所以会发生外边距重叠，是因为他们同属于body这个根元素，所以我们需要让他们不属于同一个BFC，就能避免外边距重叠： 12345678910111213141516171819202122232425262728293031&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;两个相邻盒子&lt;/title&gt; &lt;style&gt; div&#123; margin: 0 auto; &#125; .box&#123; overflow: hidden; &#125; .box1&#123; width: 200px; height: 200px; background-color: red; margin-bottom: 50px; overflow: hidden; &#125; .box2&#123; width: 200px; height: 200px; background-color: blue; margin-top: 50px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;&lt;/body&gt; 效果图： 3.BFC可以包含浮动的元素(清除浮动)正常情况下，浮动元素会脱离普通文档流，所以下面的代码里： 1234567891011121314151617181920&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;浮动创建BFC&lt;/title&gt; &lt;style&gt; .box&#123; border:3px solid #333; &#125; .box1&#123; width: 200px; height: 200px; background-color: red; float: left; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 外层的div会无法包含内部浮动的div,效果图： 但是如果我们触发外部容器的BFC，根据BFC规范中的第4条，计算BFC的高度时，浮动元素也参与计算，name外部div容器就可以包裹着浮动元素，所以修改后的代码如下： 123456789101112131415161718192021&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;浮动创建BFC&lt;/title&gt; &lt;style&gt; .box&#123; border:3px solid #333; overflow: hidden; &#125; .box1&#123; width: 200px; height: 200px; background-color: red; float: left; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 效果图如下： 4.BFC可以阻止元素被浮动元素覆盖先看一个例子： 12345678910111213141516171819202122&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;阻止浮动元素覆盖其他元素&lt;/title&gt; &lt;style&gt; .box1&#123; width: 100px; height: 100px; background-color: red; float: left; &#125; .box2&#123; width: 200px; height: 200px; background-color: teal; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;&lt;/body&gt; 效果图: 之所以是这样，是因为规则5中：每个元素的左边，与包含的盒子的左边相接触，即使存在浮动也是如此。 想要改变效果，使其互不干扰，利用规则6：BFC区域不会与float重叠，代码如下： 1234567891011121314151617181920212223&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;阻止浮动元素覆盖其他元素&lt;/title&gt; &lt;style&gt; .box1&#123; width: 100px; height: 100px; background-color: red; float: left; &#125; .box2&#123; width: 200px; height: 200px; background-color: teal; overflow: hidden; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;&lt;/body&gt; 效果图如下","categories":[],"tags":[{"name":"--笔记 --BFC","slug":"笔记-BFC","permalink":"https://github.com/BigSeeker/BigSeeker.github.io/tags/笔记-BFC/"}],"keywords":[]},{"title":"Hello World","slug":"hello-world","date":"2019-08-18T07:01:48.707Z","updated":"2019-07-24T05:33:11.913Z","comments":true,"path":"2019/08/18/hello-world/","link":"","permalink":"https://github.com/BigSeeker/BigSeeker.github.io/2019/08/18/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]},{"title":"代码规范","slug":"代码规范","date":"2019-08-15T01:46:37.000Z","updated":"2019-08-15T03:22:17.851Z","comments":true,"path":"2019/08/15/代码规范/","link":"","permalink":"https://github.com/BigSeeker/BigSeeker.github.io/2019/08/15/代码规范/","excerpt":"","text":"代码规范1.概述HTML规范基于W3C 、苹果开发者等官方文档，并结合团队业务和开发过程中总结的规范约定，让页面HTML代码更具语义性。 图片规范了解各种图片格式特性，根据特性制定图片规范，包括但不限于图片的质量约定、图片引入方式、图片合并处理等，旨在从图片层面优化页面性能。 CSS规范统一规范团队CSS代码书写风格和使用CSS预编译语言语法风格，提供常用媒体查询语句和浏览器私有属性引用，并从业务层面统一规范常用模块的引用。 命名规范从目录、图片、HTML/CSS文件、ClassName的命名等层面约定规范团队的命名习惯，增强团队代码的可读性。 *属性书写顺序建议遵循以下顺序： 1. 布局定位属性：display / position / float / clear / visibility / overflow(建议display第一个写，毕竟关系到模式) 2. 自身属性: width / height / margin / padding / border / background 3. 文本属性: color / font / text-decoration / text-align / white-space / break-word 4. 其他属性(CSS3): content / cursor / border-radius / box-shadow / background:linear-gradient…详情见：https://blog.csdn.net/weixin_41697143/article/details/81049778","categories":[],"tags":[{"name":"--笔记 --总结","slug":"笔记-总结","permalink":"https://github.com/BigSeeker/BigSeeker.github.io/tags/笔记-总结/"}],"keywords":[]},{"title":"初识CSS","slug":"初识CSS","date":"2019-08-13T03:07:38.000Z","updated":"2019-08-13T03:08:10.655Z","comments":true,"path":"2019/08/13/初识CSS/","link":"","permalink":"https://github.com/BigSeeker/BigSeeker.github.io/2019/08/13/初识CSS/","excerpt":"","text":"CSS层叠样式表 理解 css的作用 css的三种引入方式 应用 css三种引用方式的书写 通过样式规则给标签添加简单的样式 1.HTML的局限性 html满足不了设计者的需求 操作html属性不方便 html里面添加样式带来的是无尽的臃肿和繁琐 2.CSS网页的美容师 让我们的网页更加丰富，布局更加灵活自如 css最大的贡献就是：让HTML从样式中脱离，实现了HTML专注做结构呈现，样式交给css 结构（html）与样式（css）相分离 3.CSS初识 概念： css(Cascading Style Sheets),通常称为CSS样式表或层叠样式表（级联样式表） 作用： 主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图形的外形（宽高、边框样式、边距等）以及版面的布局和外观显示样式。 CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。 4.引入CSS样式表（书写位置）4.1行内式（内联样式） 概念： 称行内样式、行间样式、内嵌样式。 其基本语法格式如下： 1&lt;标签名 style=\"属性1：属性值1;属性2:属性值2;属性3:属性值3;\"&gt;内容&lt;/标签名&gt; 实际上任何html标签都拥有style属性，用来设置行内式。 注意： style其实就是标签的属性 属性和值中间是: 多组属性值之间用;隔开。 只能控制当前的标签和以及嵌套在其中的字标签，造成代码冗余 缺点 没有实现样式和结构分离 4.2内部样式表（内嵌样式表） 概念： ​ 称内嵌样式 ​ 是将CSS代码集中写在HTML文档的head头部标签中，并且用style标签定义 其基本语法格式如下: 123456789&lt;head&gt; &lt;style&gt; 选择器&#123; 属性1：属性值1； 属性2：属性值2： 属性3：属性值3； &lt;/style&gt;&lt;/head&gt; 123456&lt;style&gt; div&#123; color:red; font-size:12px; &#125;&lt;/style&gt; 4.3外部样式表（外链式） 概念： ​ 称链入式 ​ 是所有的样式放在一个或多个以.css为扩展名的外部样式表文件中。 ​ 通过link标签将外部样式表文件链接到HTML文档中。 其基本语法格式如下： 123&lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;css文件路径&quot;&gt;&lt;/head&gt; 注意： link是单标签 link标签需要放在head头部标签中，并且指定link的三个属性 CSS选择器1.CSS选择器作用选择器的作用 ​ 找到特定的的HTML页面元素 ​ 选择器分为基础选择器和复合选择器 2.CSS基础选择器2.1标签选择器 概念： ​ 标签选择器（元素选择器）是指HTML标签名作为选择器，按照标签名分类，为页面中某一类标签指定统一的CSS样式。 12345标签名&#123; 属性1：属性值1； 属性2：属性值2； 属性3：属性值3： &#125; 作用： ​ 标签选择器可以把某一类标签全部选择出来，比如所有的div标签和所有的span标签 优点： 是能快速为页面中的同类型的标签统一样式 缺点： ​ 不能设计差异化样式 2.2类选择器类选择器使用“.”(英文点号)进行标识，后面紧跟类名 语法 类名选择器 12345.类名&#123; 属性1：属性值1； 属性2：属性值2； 属性3：属性值3：&#125; 标签 1&lt;p class= &quot;类名&quot;&gt;&lt;/p&gt; 优点： 可以为元素对象定义单独或相同的样式。可以选择一个或者多个标签 注意： 类选择器使用“.”进行标识，后面紧跟类名。 长名称或词组可以使用中横线来为选择器命名。 不要纯数字、中文等命名，尽量使用英文。 2.3类选择器特殊用法-多类名我们可以给标签指定多个类名，从而达到更多的选择的目的。 在一个标签内部只能有一个class，但是可以给class多次命名。 2.4id选择器id选择器使用#进行标识，后面紧跟id名 其基本语法格式如下： id选择器 12345#id名&#123; 属性1：属性值1； 属性2：属性值2； 属性3：属性值3：&#125; 标签 1&lt;p id=&quot;id名&quot;&gt;&lt;/p&gt; 元素的id值是唯一的，只能对应于文档中的某一个具体 的元素。 用法和类选择相同 2.6通配符选择器 概念 ​ 通配符选择器用*号表示，*就是所有的 其语法格式如下： 12345*&#123; 属性1：属性值1； 属性2：属性值2； 属性3：属性值3：&#125; 例如下面的代码，使用通配符选择器定义CSS样式，清除所有的html标记的默认边距。 1234*&#123; margin:0; /*定义外边距*/ padding:0; /*定义内边距*/&#125; CSS字体样式属性调试工具1. font字体1.1 font-size：大小 font-size 属性用于设置字号 123p&#123; font-size:20px;&#125; 单位： 可以使用相对单位长度，也可以使用绝对单位长度。 相对单位长度比较常用，推荐使用像素单位，绝对长度单位使用较少。 相对长度单位 说明 em 相对于当前对象内文本的字体尺寸 px 像素，最常用，推荐使用 相对长度单位 说明 in 英寸 cm 厘米 mm 毫米 pt 点 注意： 我们文字大小以后，基本使用px，其他单位很少使用 谷歌浏览器默认的文字大小为16px 但是不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小 1.2 font-family：字体作用： ​ font-family属性用于设置哪一种字体 123p&#123; font-family:&quot;微软雅黑&quot;&#125; 网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑。 可以同时指定多个字体，中间用逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体，如果都没有，则以电脑默认的字体为准。 123p&#123; font-family:Arial,&quot;Microsoft Yahei&quot;,&quot;微软雅黑&quot;&#125; CSS Unicode 字体 为什么使用Unicode字体 在CSS中设置字体名称，直接写中文是可以的，但是在文件编码（GB2312,UTF-8等）不匹配时会产生乱码的错误。 解决： 方案一：你可以使用英文来替代。比如font-family:&quot;Microsoft Yahei&quot;. 方案二：在CSS直接使用Unicode编码来写字体名称可以避免这些错误。使用Unicode写中文字体名称，浏览器是可以正确解析的 1font-family:&quot;\\5FAE\\8F6F\\96C5\\9ED1&quot;; 表示设置字体为&quot;微软雅黑&quot;. 字体名称 英文名称 Unicode编码 宋体 SimSun \\5B8B\\4F53 新宋体 NSimSun \\65B0\\5B8B\\4F53 黑体 SimHei 9ED1\\4F53 微软雅黑 Microsoft YaHei \\5FAE\\8F6F\\96C5\\9ED1 楷体 GB2312 KaiTi GB2312 \\6977\\4F53 GB2312 LiSu \\96B6\\4E66 1.3 font-weight:字体粗细 在HTML中如何将字体加粗我们可以用标签来实现 使用b和strong标签是文本加粗 可以使用CSS来实现，但是CSS是没有语义的 属性值 描述 normal 默认值（不加粗） bold 定义粗体（加粗的） 100-900 400等同于normal，而700等同于bold 我们重点记住这句话 提倡： ​ 我们平时更喜欢用数字表示加粗和不加粗 1.4 font-style:字体风格 在HTML中如何将字体倾斜我们可以用标签来实现 字体倾斜除了用 i 和 em 标签， 可以使用CSS来实现，但是CSS是没有语义的 font-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下： 属性 作用 normal 默认值，浏览器会显示标准的字体样式 italic 浏览器会显示斜体的字体样式 1.5 font:综合设置字体样式（重点）font属性用于对字体进行综合设置 基本语法格式如下： 1234选择器&#123; font:font-style font-weight font-size/line-height font-family; &#125; 注意： 使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开 其中不需要设置的属性可以省略（取默认值）。但是必须保留font-size和font-family属性，否则font属性将不起作用 2.CSS外观属性1.1 color：文本颜色 作用： ​ color属性用于定义文本的颜色。 其取值方式有如下三种： 表示 属性值 预定义的颜色值 red,green,blue,pink 十六进制 #FF0000,#FF6600,#29D794 RGB代码 rgb{255,0,0}或rgb{100%,0%,0} 2.2 text-align:文本水平对齐方式 作用： ​ text-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性 其可用属性值： 属性 解释 left 左对齐（默认值） right 右对齐 center 居中对齐 注意： ​ 是让盒子里面的内容水平居中，而不是让盒子居中对齐 2.3 line-height：行间距 作用： ​ line-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。 单位： line-height常用的属性值单位有三种，分别为像素px,相对值em和百分比%，实际工作中使用最多的是像素px 技巧： 12一般情况下，行距比字号大大7,8像素左右就可以了。line-height：24px； 2.4 text-indent:首行缩进 作用： text-indent属性用于设置首行文本的缩进， 属性值 其属性值为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值。 建议使用em作为设置单位 1em就是一个字的宽度，如果是汉字的段落，1em就是一个汉字的宽度。 123p&#123; text-indent:2em;&#125; 2.5 text-decoration文本的装饰text-decoration 通常我们用于给链接修改装饰效果。 值 描述 none 默认。定义标准的文本。取消下划线（常用） underline 定义文本下的一条线。下划线 也是我们链接自带的（常用） overline 定义文本上的一条线（并用） line-through 定义穿过文本下的一条线（不常用） *emmet语法","categories":[],"tags":[{"name":"-- 笔记","slug":"笔记","permalink":"https://github.com/BigSeeker/BigSeeker.github.io/tags/笔记/"}],"keywords":[]},{"title":"HTML3表格和表单","slug":"HTML3表格和表单","date":"2019-07-30T11:17:11.000Z","updated":"2019-08-15T02:25:25.661Z","comments":true,"path":"2019/07/30/HTML3表格和表单/","link":"","permalink":"https://github.com/BigSeeker/BigSeeker.github.io/2019/07/30/HTML3表格和表单/","excerpt":"","text":"表格表格作用： 表格到现在还是较为常用的一种标签，但不是用来布局的，常见显示、展示表格式数据。 因为它可以让数据显示的非常规整，可读性非常好。 特别是后台展示数据的时候表格运用是否熟练就显得很重要，一个清爽简约的表格能够把繁杂的数据表现的很有条理，虽然div布局也可以做到，但是总没有表格来得方便。 ​ 1.创建表格在HTML网页中，要想创建表格，就需要使用表格相关的标签。 创建表格的基本语法： 1234567&lt;table&gt; &lt;tr&gt; &lt;td&gt;单元格内的文字&lt;/td&gt; ... &lt;/tr&gt; ...&lt;/table&gt; 2.表格属性 属性名 含义 常用属性值 border 设置表格的边框（默认border=“0”为无边框） 像素值 cellspacing 设置单元格与单元格边框之间的空白间距 像素值（默认为2像素） cellpadding 设置单元格内容与单元格边框之间的空白间距 像素值（默认为1像素） width 设置表格的宽度 像素值 height 设置表格的高度 像素值 align 设置表格在网页中的水平对齐方式 left、center、right 3.表头单元格标签th 作用： 一般表头单元格位于表格的第一行或第一列，并且文本加粗居中。 语法： 只需要用表头标签替代相应的单元格标签 4.合并单元格合并单元格的2种方式： 跨行合并：rowspan=“合并单元格的个数” 跨列合并：colspan=“合并单元格的个数” 5.表格划分结构1对于复杂的表格，表格的结构也就相对复杂了，所以将表格分为三个部分：题头、正文和脚注。而这三部分分别用：thead，tbody，tfoot来标注，这样更好的分清表格结构。 注意: :用于定义表格的头部。用来存放标题之类的东西。内部必须拥有标签！ :用于定义表格的主体。放数据本体。 :放表格的脚注之类。 以上都是放到标签中。 列表1.1无序列表无序列表的各个列表项之间没有顺序级别之分，是并列的。其基本语法格式如下： 123456&lt;ul&gt; &lt;li&gt;列表项1&lt;/li&gt; &lt;li&gt;列表项2&lt;/li&gt; &lt;li&gt;列表项3&lt;/li&gt; ....&lt;/ul&gt; 1.2有序列表有序列表即为有顺序的列表，其各个列表项按照一定的顺序排列定义。 123456&lt;ol&gt; &lt;li&gt;列表项1&lt;/li&gt; &lt;li&gt;列表项2&lt;/li&gt; &lt;li&gt;列表项3&lt;/li&gt; ....&lt;/ol&gt; 1.3自定义列表定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。其基本语法如下： 12345678910&lt;dl&gt; &lt;dt&gt;名词1&lt;/dt&gt; &lt;dd&gt;名词1解释1&lt;/dd&gt; &lt;dd&gt;名词1解释2&lt;/dd&gt; .... &lt;dt&gt;名词2&lt;/dt&gt; &lt;dd&gt;名词2解释1&lt;/dd&gt; &lt;dd&gt;名词2解释2&lt;/dd&gt; ....&lt;/dl&gt; 表单作用： 表单的目的是为了收集用户信息。 在网页中，我们也需要跟用户进行交互，收集用户资料，此时也需要表单。 在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成。 表单域：相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过它定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。 1.1input控件 语法： &lt;input type=&quot;属性值&quot; value=&quot;你好&quot;&gt; input输入的意思 &lt;input /&gt;标签为单标签 type属性设置不同的属性值用来指定不同的控件类型 除了type属性还有别的属性 常用属性： 属性 属性值 描述 type text 单行文本输入框 password 密码输入框 radio 单选按钮 checkbox 复选框 button 普通按钮 submit 提交按钮 reset 重置按钮 image 图像形式的提交按钮 file 文件域 name 由用户自定义 控件的名称 value 由用户自定义 input控件中的默认文本值 size 正整数 input控件在页面中的显示宽度 1. type属性 这个属性通过改变值，可以决定你属于哪种表单。 比如type=“text”就表示文本框可以作为用户名、昵称等。 比如type=“password”就是表示密码框 用户输入的内容是不可见的。 12用户名：&lt;input type=&quot;text&quot;&gt;密 码：&lt;input type=&quot;password&quot;&gt; 2. value属性1用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;请输入用户名&quot;&gt; value默认的文本值。有些表单想刚打开页面就默认显示几个文字，就可以通过value来设置。 3. name属性1用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; name表单的名字，这样，后台可以通过这个name属性找到这个表单。页面中的表单很多，name主要作用就是用于区别不同的表单。 name属性后面的值，是我们自己定义的 radio 如果是一组，我们必须给他们命名相同的名字 name 这样就可以多个选其中的一个了 12&lt;input type=&quot;radio&quot; name =&quot;gender&quot; &gt;男&lt;input type=&quot;radio&quot; name =&quot;gender&quot; &gt;女 4.checked属性 表示默认选中状态，较常见于单选和 复选按钮。 123性别： &lt;input type=&quot;radio&quot; name=&quot;gender&quot; checked&gt;男 &lt;input type=&quot;radio&quot; name=&quot;gender&quot;&gt;女 上面代码表示默认选中了男这个选项。 2.1 label标签目标： label标签主要目的是为了提高用户体验。为用户提高最优秀的服务。 作用： 用于绑定一个表单元素，当点击label标签的时候，被绑定的表单元素就会获得输入焦点。 绑定元素： 第一种用法就是用label直接包括input表单 1&lt;label&gt;用户名：&lt;input type=&quot;radio&quot; name=&quot;username&quot; value=&quot;请输入用户名&quot;&gt;&lt;/label&gt; ​ 适合单个表单选择 第二种用法for属性规定label与哪个表单元素绑定。 123&lt;label for=&quot;gender_male&quot;&gt; &lt;inputid=&quot;gender_male&quot; type=&quot;radio&quot; name=&quot;gender&quot;&gt;男&lt;/label&gt; 3. form表单域 目的： ​ 在HTML中，form标签被用于定义表单域，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。 语法： 123&lt;form action=&quot;url地址&quot; method=&quot;提交方式&quot; name=&quot;表单名称&quot;&gt; 各种表单控件&lt;/form&gt; 常用属性： 属性 属性值 作用 action URL地址 用于指定接收并处理表单数据的服务器程序的url地址。 method get/post 用于设置表单数据的提交方式，其取值为get或post。 name 名称 用于指定表单的名称，以区分同一个页面中的多个表单。 查文档经常查阅文档是一个很好的习惯 W3C：http://www.w3cschool.com.cn/ MDN: https://developer.mozilla.org/zh-CN/","categories":[],"tags":[{"name":"--笔记","slug":"笔记","permalink":"https://github.com/BigSeeker/BigSeeker.github.io/tags/笔记/"}],"keywords":[]},{"title":"HTML常用标签","slug":"HTML常用标签","date":"2019-07-29T01:19:40.000Z","updated":"2019-08-15T02:24:15.487Z","comments":true,"path":"2019/07/29/HTML常用标签/","link":"","permalink":"https://github.com/BigSeeker/BigSeeker.github.io/2019/07/29/HTML常用标签/","excerpt":"","text":"1.HTML常用标签1.1排版标签排版标签主要和css搭配使用，显示网页结构的标签，是网页布局最常见的标签。 1）标题标签h(熟记)标题标签语义:作为标题使用，并且依据重要性递减 其基本语法格式如下： 123456&lt;h1&gt; 标题文本 &lt;/h1&gt;&lt;h2&gt; 标题文本 &lt;/h2&gt;&lt;h3&gt; 标题文本 &lt;/h3&gt;&lt;h4&gt; 标题文本 &lt;/h4&gt;&lt;h5&gt; 标题文本 &lt;/h5&gt;&lt;h6&gt; 标题文本 &lt;/h6&gt; 显示效果如下: ![显示效果](C:\\Users\\86153\\Pictures\\Saved Pictures\\homework\\火狐截图_2019-07-29T03-00-19.939Z.png) 2）段落标签p(熟记)作用语义： ​ 可以把HTML文档分割为若干段落 1&lt;p&gt; 文本内容 &lt;/p&gt; 是HTML文档中最常见的标签，默认情况，文本在一个段落中会根据浏览器窗口的大小自动换行。 3）水平线标签hr（认识）在网页中常常看到一些水平线将段落与段落之间隔开，使得文档结构清晰，层次分明。这些水平线可以通过插入图片实现，也可以简单地通过标签来完成，就是创建横跨网页水平线的标签。其语法格式如下： 1&lt;hr /&gt;是单标签 在网页中显示默认样式的水平线。 4)换行br（熟记）在HTML中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后自动换行。如果希望某段文本强制换行显示，就需要使用换行标签 1&lt;br /&gt; 5)div 和 span标签（重点）div和span是没有语义的 是我们网页布局主要的2个盒子 div 就是 divsion的缩写 分割，分区的意思 其实有很多div来组合网页 span 跨度，跨距；范围 语法格式： 1&lt;div&gt; 这是头部 &lt;/div&gt; &lt;span&gt;我是李晓鹏&lt;/span&gt; 他们两个都是盒子，用来装我们网页元素的 div标签 用来布局的，但是现在一行只能放一个div span标签 用来布局的，一行上可以放好多个span 排版标签总结 标签名 定义 说明 &lt;hx&gt;&lt;/hx&gt; 标题标签 作为标题使用，并且依据重要性递减 &lt;p&gt;&lt;/p&gt; 段落标签 可以把HTML文档分割为若干段落 &lt;hr /&gt; 水平线标签 &lt;br /&gt; 换行标签 &lt;div&gt;&lt;/div&gt; div标签 用来布局，但是现在一行只能放一个div &lt;span&gt;&lt;/span&gt; span标签 用来布局的，一行可以放多个span 1.2文本格式化标签在网页中，有时需要为文字设置粗体、斜体或下划线效果，这时就需要用到HTML中的文本格式化标签，使文字以特殊的方式显示。 标签 显示效果 &lt;b&gt;&lt;/b&gt; 和 &lt;strong&gt;&lt;/strong&gt; 文字以粗体方式显示（XHTML推荐使用strong） &lt;i&gt;&lt;/i&gt; 和 &lt;em&gt;&lt;/em&gt; 文字以斜体方式显示（XHTML推荐使用em） &lt;s&gt;&lt;/s&gt; 和 &lt;del&gt;&lt;/del&gt; 文字以加删除线s&gt;方式显示（XHTML推荐使用del） &lt;u&gt;&lt;/u&gt; 和 &lt;ins&gt;&lt;/ins&gt; 文字以加下划线方式显示（XHTML不赞成使用u） 区别： b只是加粗 strong 除了可以加粗还有强调的意思，语义更强烈 1.3标签属性 使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。其基本语法格式如下： 1&lt;标签名 属性1=\"属性值1\" 属性2=\"属性值2\" ...&gt;内容&lt;/标签名&gt; 1.4图像标签img（重点）要想在网页中显示图像就需要使用图像标签，语法如下： 1&lt;img src=\"图像URL\" /&gt; 该语法中src属性用于指定图像文件的路径和文件名，他是img标签的必须属性。 属性 属性值 描述 src URL 图像的路径 alt 文本 图像不能显示时的替换文本 title 文本 鼠标悬停时显示的内容 width 像素（XHTML不支持%页面百分比） 设置图像的宽度 height 像素（XHTML不支持%页面百分比） 设置图像的高度 border 数字 设置图像边框的宽度 border 会用css来做 1.5链接标签（重点）在HTML中创建超链接非常简单，只需用标签把文字包括起来就好 1&lt;a href=\"跳转目标\" target=\"目标窗口的弹出方式\"&gt;文本或图像&lt;/a&gt; 属性 作用 href 用于指定链接目标的URL地址（必须属性）当为标签应用href属性时，它就具有了超链接的功能 targrt 用于指定链接页面的打开方式，其取值有self和blank两种，其中self为默认值，blank为在新窗口中的打开方式 注意： 外部链接 需要添加 http://www.baidu.com 内部链接 直接链接内部页面名称即可 比如 &lt;a href=”index.html”&gt; 首页 如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”（即href=#）,表示该链接暂时为一个空链接。 不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。 1.6注释标签​ 在HTML中有一种特殊的标签–注释标签，如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。 语法格式： 1&lt;!--注释语句--&gt; 快捷键是： ctrl + / | 或者ctrl+shift+/ 2.路径（重点）相对路径以引用文件之网页所在位置为参考基础，而建立出的目录路径。因此，当保存于不同目录的网页引用同一个文件时，使用的路径不同，故称为相对路径。 绝对路径绝对路径以web站点根目录为参考基础的目录路径。之所以绝对，意指当所有的网页引用同一个文件时，所使用的路径都是一样的。 3.拓展3.1锚点定位通过创建锚点链接，用户能够快速定位到目标内容。 创建锚点链接分为两步： 1231.使用相应的id名标注跳转目标的位置。（找目标）&lt;h3 id=\"two\"&gt;第2集&lt;/h3&gt;2.使用&lt;a href=\"#id名\"&gt;链接文本&lt;/a&gt;创建链接文本（被点击的） 3.2 base标签语法： 1&lt;base target=\"_blank\"&gt; 3.3预格式化文本pre标签1&lt;pre&gt;标签可定义预格式化的文本。 1被包围在&lt;pre&gt;&lt;/pre&gt;标签元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。 123456&lt;pre&gt; 此例演示如何使用 per标签 对空行和 空格 进行控制&lt;/pre&gt; 所谓的预格式文本就是，按照我们预先写好的文字格式来显示页面，保留空格和换行等。 有了这个标签，里面的文字，会按照我们书写的模式显示，不需要段落和换行标签了。但是，比较少用，因为不好整体控制。 3.4特殊字符一些特殊符号，我们在html里面很难或者不方便使用，我们可以使用下面的替代代码。 特殊字符 描述 字符代码 “ ” 空格符 &amp;nbsp； &lt; 小于号 &amp;lt； &gt; 大于号 &amp;gt； &amp; 和 号 &amp;amp； © 版权 &amp;copy； ® 注册商标 &amp;reg； ℃ 摄氏度 &amp;deg； 上标2 &amp;sup2； 下标2 &sub2; 3.5 什么是XHTMLXHTML是更严格更纯净的HTML代码。 XHTML指可扩展超文本标签语言（Extensible HyperText Markup Language）。 XHTML的目标是取代HTML。 XHTML与HTML4.01几乎是相同的。 XHTML是更严格更纯净的HTML版本。 XHTML是作为一种XML应用被重新定义的HTML。 XHTML是一个W3C标准。 3.6 HTML和XHTML之间有什么区别? XHTML指的是可扩展文本标记语言 XHTML与HTML4.01几乎是相同的 XHTML是更严格更纯净的HTML版本。 XHTML是以XML应用的方式定义的HTML。 XHTML是2001年1月发布的W3C推荐标准 XHTML得到所有主流浏览器的支持 XHTML元素是以XML格式编写的HTML元素。XHTML是严格版本的HTML，例如它要求标签必须小写，标签必须被正确关闭，标签顺序必须正确排列，对于属性都必须使用双引号等。 3.思维导图思维导图","categories":[],"tags":[{"name":"--笔记","slug":"笔记","permalink":"https://github.com/BigSeeker/BigSeeker.github.io/tags/笔记/"}],"keywords":[]},{"title":"HTML1","slug":"HTML1","date":"2019-07-25T10:42:24.000Z","updated":"2019-08-15T02:19:19.348Z","comments":true,"path":"2019/07/25/HTML1/","link":"","permalink":"https://github.com/BigSeeker/BigSeeker.github.io/2019/07/25/HTML1/","excerpt":"","text":"学习目标 理解 HTML的概念 HTML标签的分类 HTML标签的关系 HTML标签的语义化 应用 HTML 的骨架格式 sublime基本使用 1.初识HTML HTML指的是超文本标记语言（Hyper Text Markup Language）是用来描述网页的一种语言。 HTML不是一种编程语言，而是一种标记语言（markup language） 标记语言是一套标记标签（markup tag） HTML的作用： 网页是由网页元素组成的，这些元素是利用html标签描述出来，然后通过浏览器解析，就可以显示给用户了。 所谓超文本，有两层含义 因为它可以加入图片、声音、动画、多媒体等内容（超文本限制） 不仅如此，它还可以从一个文件跳转到另一个文件，与世界各地主机的文件连接（超链接文本）。 1&lt;img src= &quot;timg.jpg&quot;/&gt; 总结 html是超文本标记（标签）语言 我们学习html主要学习html标签 我们用html标签描述网页元素。比如图片标签、文字标签、链接标签等等 标签有自己的语法规范，所有的html标签都是用&lt;&gt;表示的 H（很）T（甜）M（蜜）L（啦）是很快乐的事啊..哈哈哈哈…… 1.1HTML骨架标签HTML有自己的语言语法骨架格式：(要遵循、要专业)务必非常流畅的默写下来！！！ 1234567&lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; html骨架标签总结 标签名 定义 说明 &lt;html&gt;&lt;/html&gt; HTML标签 页面中最大的标签，我们称为根标签 &lt;head&gt;&lt;/head&gt; 文档的头部 注意在head标签中我们没有必要设置的标签是title &lt;title&gt;&lt;/title&gt; 文档的标题 让页面拥有一个属于自己的网页标题 &lt;body&gt;&lt;/body&gt; 文档的主体 元素包含文档的所有内容，页面内容 基本都放到body 建议：HTML标签名、类名标签属性和大部分属性值统一用小写 1.2HTML元素标签分类标签： 在HTML页面中，带有“&lt;&gt;”符号的元素被称为HTML标签，如上面提到的、、都是HTML骨架结构标签。 分类： 常规元素（双标签） 1&lt;标签名&gt;内容&lt;/标签名&gt; 比如&lt;body&gt; 我是文字 &lt;/body&gt; 该语法中“&lt;标签名&gt;”表示该标签的作用开始，一般称为“开始标签(start tag)”, “&lt;/标签名&gt;”表示该标签的作用结束，一般称为“结束标签（end tag）”。 和开始标签相比，结束标签只是在前面加了一个关闭符“/”。 我们以后接触的基本都是双标签 2.空元素（单标签） 1&lt;标签名 /&gt; 比如 &lt;br /&gt; 空元素用单标签来表示，简单点说，就是里面不需要包含内容，只有一个开始标签不需要关闭。 这种单身狗标签非常少，没有多少，我们多记忆就好，哈哈 1.3HTML标签关系针对双标签的相互关系分为两种：请大家务必熟悉记住这种标签关系，因为后面我们标签嵌套特别多，很容易弄混他们的关系。 嵌套关系 123&lt;head&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt; 并列关系 12&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt; 倡议： 12&gt; 如果两个标签之间的关系是嵌套关系，子元素最好缩进一个tab键的身位（一个tab是4个空格）。如果是并列关系，最好上下对齐&gt; 可以这样说： html双标签 可以分为 有一种是 父子级 包含关系的标签 一种是 *兄弟级 * 并列关系的标签 2.代码开发工具（书写代码） 为了提高我们的开发效率 为了减少代码的出错我们不提倡用记事本开发，我们有更好的开发工具 Dreamweaver SublimeText WebStorm HBuilder VScode sublime 有非常多的优点，非常轻量级，打开速度超快，后面还有更高的功能，后面再接触。 sublime生成html骨架小技巧 双击打开软件 新建文件（ctrl+n） 保存（ctrl+s）,保存为.html(注意 后缀名必须是.html) 生成页面骨架代码结构 html:5 按下tab键或者 !按下tab键 3.文档类型&lt;！DOCTYPE&gt;用法： 1&lt;!DOCTYPE html&gt; 作用： 1&lt;!DOCTYPE&gt; 声明位于文档中的最前面的位置，处于&lt;html&gt;标签之前。此标签可告知浏览器文档使用哪种HTML或XHTML规范 提示： &lt;!DOCTYPE html&gt; 就是告诉浏览器按照HTML5规范解析页面。约定： HTML文件必须加上DOCTYPE 声明，并统一使用HTML5的文档声明。 4.页面语言lang1&lt;html lang=&quot;en&quot;&gt; 指定html语言种类 最常见的2个： en定义语言为英语 zh-CN定义语言为中文 约定： 考虑浏览器和操作系统的兼容性，目前仍然使用 `zh-CN` 属性值 拓展： 根据lang属性来设定不同语言的css样式，或者字体 告诉搜索引擎做精确的识别 让语法检查程序做语言识别 帮助翻译工具做识别 5.字符集1&lt;meta charset=&quot;UTF-8&quot; /&gt; 123字符集（Character set）是多个字符的集合计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字。 utf-8是目前最常用的字符集编码方式，常用的字符集编码方式还有gbk和gb2312。 gb2312 简单中文 包括6763个汉字 BIG5 繁体中文 港澳台等用 gbk包含全部中文字符 是GBK2312的扩展，加入对繁体字的支持，兼容GB2312 UTF-8则基本包含全世界所有国家需要用到的字符 如果没有这句代码，可能会引起乱码的情况。 提示： 这句代码是让html文件以UTF-8编码保存，浏览器根据编码去解码对应的html内容。 6.HTML标签的语义化白话：所谓标签语义化，就是指标签的含义。 方便代码的阅读和维护 同时让浏览器或是网络爬虫可以很好地解析，从而更好的分析其中的内容 使用语义化标签会具有更好的搜索引擎优化 根据标签的语义，在合适的地方给一个最为合理的标签。 遵循的原则： 先确定语义的HTML，再选适合的CSS。所以，我们接下来学习html标签，要根据语义去记忆。HTML网页中任何元素的实现都要依靠HTML标签。","categories":[],"tags":[{"name":"--笔记","slug":"笔记","permalink":"https://github.com/BigSeeker/BigSeeker.github.io/tags/笔记/"}],"keywords":[]},{"title":"初识web","slug":"web","date":"2019-07-25T05:43:16.000Z","updated":"2019-08-15T02:32:12.160Z","comments":true,"path":"2019/07/25/web/","link":"","permalink":"https://github.com/BigSeeker/BigSeeker.github.io/2019/07/25/web/","excerpt":"","text":"目标121.目标：能根据psdwen文件，用HTML+CSS布局出符合W3C规范的网页。2.W3C标准不是某一个标准，而是一系列标准的集合。网页主要由三部分组成：结构（Structure）、表现（Presentation）和行为（Behavior）。 认识Web1.认识网页网页主要由文字、图像和超链接等元素构成。当然，除了这些元素，网页还可以包含音频、视频以及Flash等。 2.浏览器（显示代码）2.1chrome 2.2浏览器内核1内核：负责读取网页内容，整理讯息，计算网页的显示方式并显示页面。 浏览器 内核 备注 IE Trident IE、猎豹安全、360极速浏览器、百度浏览器 firefox Gecko 可惜这几年已经没落了，打开速度慢、升级频繁、有猪一样的队友flash、神一样的对手chorme Safari webkit 现在很多人错误把webkit叫做chrome内核（即使chrome内核已经是blink了）。苹果感觉像被别人抢了媳妇，都哭晕在厕所了。 chorme Chromium/Bink 在chromium项目中研发Blink渲染引擎（即浏览器核心），内置于Chrome浏览器之中。Blink其实是WebKit的分支。大部分国产浏览器最新版都采用Blink内核。二次开发。 Opera blink 现在跟随chrome用blink内核。 3.Web标准（重点） 记忆 说出网页中web标准三层组成 理解 能结合人来表述web标准三层 Web标准不是某一个标准，而是由W3C组织和其他标准化组织制定的一系列标准的集合。 Web标准的好处遵循web标准可以让我们写的页面更标准更统一外，还有许多优点 让web的发展前景更广阔 内容能被更广泛的设备访问 更容易被搜索引擎搜索 降低网站流量费用 使网站更易于维护 提高页面浏览速度 3.3web标准构成1构成：主要包括结构（Structure）、表现（Presentation）和行为（Behavior）三个方面。 标准 说明 结构 结构用于对网页元素进行整理和分类，咱们主要学的是HTML。 表现 表现用于设置网页元素的版式、颜色、大小等外观样式，主要指CSS。 行为 行为是指网页模型的定义及交互的编写，咱们主要学的是Javascript。 理想状态我们的源码：.HTML .css .js ​ 结合人来记忆web标准： 结构标准：是你天然的身体 表现标准：决定你是否打扮的美丽外观 行为标准：决定你是否有吸引人的行为 web标准小结 web标准有三层结构，分别是结构、表现和行为 结构类似人的身体，表现类似人的着装，行为类似人的行为动作 理想状态下，他们三层都是独立的，放到不同的文件夹里面 4.拓展@ 介绍一下你对浏览器内核的理解？常见的浏览器内核有哪些？ 浏览器内核包括两部分，渲染引擎和js引擎。渲染引擎负责读取网页内容，整理讯息，计算网页的显示方式并显示页面，js引擎是解析执行js获取网页的动态效果。后来JS引擎越来越独立，内核就倾向于只渲染引擎。 ​ IE:Trident ​ firefox:Gecko ​ chrom、safari:webkit ​ Opera:Presto ​ Microsoft Edge: EdgeHTML","categories":[],"tags":[{"name":"-笔记","slug":"笔记","permalink":"https://github.com/BigSeeker/BigSeeker.github.io/tags/笔记/"}],"keywords":[]},{"title":"MyFirstBlog","slug":"MyFirstBlog","date":"2019-07-24T07:27:36.000Z","updated":"2019-07-25T05:40:25.101Z","comments":true,"path":"2019/07/24/MyFirstBlog/","link":"","permalink":"https://github.com/BigSeeker/BigSeeker.github.io/2019/07/24/MyFirstBlog/","excerpt":"","text":"我的第一篇博客","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://github.com/BigSeeker/BigSeeker.github.io/tags/随笔/"}],"keywords":[]}]}